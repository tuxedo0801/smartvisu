/**
 * -----------------------------------------------------------------------------
 * @package     smartVISU / driver
 * @author      Alexander Christian
 * @copyright   2016
 * @license     GPL [http://www.gnu.de]
 * @version        0.0.1-SNAPSHOT
 * -----------------------------------------------------------------------------
 */


/**
 * Class for controlling all communication with a connected system. There are
 * simple I/O functions, and complex functions for real-time values.
 */
var io = {
    // the adress
    adress: '',
    // the port
    port: '',
    // -----------------------------------------------------------------------------
    // P U B L I C   F U N C T I O N S
    // -----------------------------------------------------------------------------

    /**
     * Does a read-request and adds the result to the buffer
     *
     * @param      the item
     */
    read: function (item) {
        io.kad_read(item);
    },
    /**
     * Does a write-request with a value
     *
     * @param      the item
     * @param      the value
     */
    write: function (item, val) {
        io.kad_write(item, val);
    },
    /**
     * Trigger a logic
     *
     * @param      the logic
     * @param      the value
     */
    trigger: function (name, val) {
        // not supported
    },
    /**
     * Initializion of the driver
     *
     * @param      the ip or url to the system (optional)
     * @param      the port on which the connection should be made (optional)
     */
    init: function (address, port) {
        io.address = address;
        io.port = port;
        io.kad_unsubscribe();
        io.setup();
    },
    /**
     * Lets the driver work
     */
    run: function (realtime) {
        // old items
        widget.refresh();

        // run polling
//		if (realtime) {
        io.kad_subscribe();
//		}
    },
    // -----------------------------------------------------------------------------
    // C O M M U N I C A T I O N   F U N C T I O N S
    // -----------------------------------------------------------------------------
    // The function in this paragrah may be changed. They are all private and are
    // only be called from the public functions above. You may add or delete some
    // to fit your requerements and your connected system.

    session: "0",
    subscribe: false,
    
    setup: function () {
        console.log("setup: Trigger login");
        
        $.ajax({url: io.address + '/login?user=smartvisu&pass=****&device=browser',
            type: "GET",
            dataType: 'json',
            async: false,
            cache: false
        })
        .done(function (response) {
            
            if (typeof (response) == 'object') {
                
                // these are the new values
                $.each(response, function (key, val) {
                    if (key == 'session') {
                        io.session = val;
                        console.log("Got session from server: " + io.session);
                    }
                });
            }
        });
//        })
//        .error(
//            notify.error('Driver: kad', "Error login")
//        );
    },

    /**
     * Start the real-time values. Can only be started once
     */
    kad_subscribe: function () {
        console.log("start");
        if (io.session != "0") {
            // subscribe
            if (widget.listeners().length) {
                // prepare url
                var request = 'session=' + io.session + '&';
                var counter = 0;

                var item = widget.listeners();
                for (var i = 0; i < item.length; i++) {
                    if (counter > 0) {
                        request = request + '&';
                    }

                    request = request + 'addr=' + item[i];
                    counter++;
                }

                console.log("subscribe for addrs: " + request);

                var eventSource = new EventSource(io.address + "/read?" + request);
                
                eventSource.addEventListener('message', io.onMessageHandler);
                
                eventSource.addEventListener('open', function(e) {
                    io.subscribe=true;    
                    console.log("connection opened");
                }, false);
                
                eventSource.addEventListener('error', function (e) {
                    if (e.readyState == EventSource.CLOSED) {
                        // Connection was closed.
                        io.subscribe=true;
                        console.log("connection was closed by event");
                    }
                }, false);


            }
            // end subscribe
        } else {
            console.log("Cannot subscribe. No session id available :-( Login first");
        }
    },
    
    /**
     * @param {event} sse event
     * @returns {undefined}
     */
    
    onMessageHandler: function(event) {
        
        console.log("Received message");
        // stop sse: see: http://stackoverflow.com/questions/5954621/start-and-stop-server-sent-events-notification
        if (!io.subscribe) {
            console.log("do not longer subscribe. close now.");
            event.target.close();
        } 
       
        var jsonObj = JSON.parse(event.data);
        console.log("payload message from server:  " + JSON.stringify(jsonObj));
  
        for (item in jsonObj.data) {
            var itemName = item;
            var itemValue = jsonObj.data[item];
            console.log(itemName +" -> "+ itemValue);
            widget.update(itemName, itemValue);
        }
    },
    
    /**
     * Stop the real-time values
     */
    kad_unsubscribe: function () {
        console.log("stop");
        io.subscribe=false;
    },
    
    
    /**
     * Read a specific item from bus and add it to the buffer
     */
    kad_read: function (item) {

        console.log("get item: " + item);
//        $.ajax({url: io.address + '/read?' + getForUrl,
//            type: "GET",
//            dataType: 'json',
//            async: true,
//            cache: false
//        })
//                .done(function (response) {
//                    widget.update(item, response[item]);
//                })
//                .error(notify.error('Driver: kad', "Error reading item!"));
    },
    /**
     * Write a value to bus
     */
    kad_write: function (item, val) {
        console.log("put item: " + item);
        var timer_run = io.timer_run;

        $.ajax({url: io.address + '/write',
            data: ({addr: item, value: val, ts: $.now()}),
            type: "GET",
            dataType: 'json',
            cache: false
        })
        .done(function (response) {
            widget.update(item, val);

            if (timer_run) {
                io.subscribe();
            }
        })
        .error(notify.error('Driver: kad', "Error writing item!"));
    }

};
